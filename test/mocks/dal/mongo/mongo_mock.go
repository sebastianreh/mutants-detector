// Code generated by MockGen. DO NOT EDIT.
// Source: dal/mongo/mongo.go

// Package mock_mongo is a generated GoMock package.
package mongo

import (
	//. "ExamenMeLiMutante/settings"
	"github.com/golang/mock/gomock"
	"go.mongodb.org/mongo-driver/mongo"
	"reflect"
)

// MockIMongoDatabase is a mock of IMongoDatabase interface
type MockIMongoDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIMongoDatabaseMockRecorder
}

// MockIMongoDatabaseMockRecorder is the mock recorder for MockIMongoDatabase
type MockIMongoDatabaseMockRecorder struct {
	mock *MockIMongoDatabase
}

// NewMockIMongoDatabase creates a new mock instance
func NewMockIMongoDatabase(ctrl *gomock.Controller) *MockIMongoDatabase {
	mock := &MockIMongoDatabase{ctrl: ctrl}
	mock.recorder = &MockIMongoDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMongoDatabase) EXPECT() *MockIMongoDatabaseMockRecorder {
	return m.recorder
}

// SubjectsDatabase mocks base method
func (m *MockIMongoDatabase) SubjectsDatabase() *mongo.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubjectsDatabase")
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// SubjectsDatabase indicates an expected call of SubjectsDatabase
func (mr *MockIMongoDatabaseMockRecorder) SubjectsDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubjectsDatabase", reflect.TypeOf((*MockIMongoDatabase)(nil).SubjectsDatabase))
}

// ConfigureDatabase mocks base method
func (m *MockIMongoDatabase) ConfigureDatabase() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigureDatabase")
}

// ConfigureDatabase indicates an expected call of ConfigureDatabase
func (mr *MockIMongoDatabaseMockRecorder) ConfigureDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDatabase", reflect.TypeOf((*MockIMongoDatabase)(nil).ConfigureDatabase))
}
