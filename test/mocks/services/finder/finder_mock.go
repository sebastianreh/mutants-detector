// Code generated by MockGen. DO NOT EDIT.
// Source: services/finder/finder.go

// Package mock_finder is a generated GoMock package.
package mock_finder

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	. "sync"
)

// MockIMutantFinderService is a mock of IMutantFinderService interface
type MockIMutantFinderService struct {
	ctrl     *gomock.Controller
	recorder *MockIMutantFinderServiceMockRecorder
}

// MockIMutantFinderServiceMockRecorder is the mock recorder for MockIMutantFinderService
type MockIMutantFinderServiceMockRecorder struct {
	mock *MockIMutantFinderService
}

// NewMockIMutantFinderService creates a new mock instance
func NewMockIMutantFinderService(ctrl *gomock.Controller) *MockIMutantFinderService {
	mock := &MockIMutantFinderService{ctrl: ctrl}
	mock.recorder = &MockIMutantFinderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMutantFinderService) EXPECT() *MockIMutantFinderServiceMockRecorder {
	return m.recorder
}

// IsMutant mocks base method
func (m *MockIMutantFinderService) IsMutant(dna []string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMutant", dna)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMutant indicates an expected call of IsMutant
func (mr *MockIMutantFinderServiceMockRecorder) IsMutant(dna interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMutant", reflect.TypeOf((*MockIMutantFinderService)(nil).IsMutant), dna)
}
