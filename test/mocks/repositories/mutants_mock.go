// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/mutants.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "github.com/sebastianreh/mutants-detector/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMutantRepository is a mock of IMutantRepository interface
type MockIMutantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMutantRepositoryMockRecorder
}

// MockIMutantRepositoryMockRecorder is the mock recorder for MockIMutantRepository
type MockIMutantRepositoryMockRecorder struct {
	mock *MockIMutantRepository
}

// NewMockIMutantRepository creates a new mock instance
func NewMockIMutantRepository(ctrl *gomock.Controller) *MockIMutantRepository {
	mock := &MockIMutantRepository{ctrl: ctrl}
	mock.recorder = &MockIMutantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMutantRepository) EXPECT() *MockIMutantRepositoryMockRecorder {
	return m.recorder
}

// SaveSubjectIteration mocks base method
func (m *MockIMutantRepository) SaveSubjectIteration(arg0 models.Subject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveSubjectIteration", arg0)
}

// SaveSubjectIteration indicates an expected call of SaveSubjectIteration
func (mr *MockIMutantRepositoryMockRecorder) SaveSubjectIteration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSubjectIteration", reflect.TypeOf((*MockIMutantRepository)(nil).SaveSubjectIteration), arg0)
}

// GetSubjectStatus mocks base method
func (m *MockIMutantRepository) GetSubjectStatus(dnaId string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectStatus", dnaId)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubjectStatus indicates an expected call of GetSubjectStatus
func (mr *MockIMutantRepositoryMockRecorder) GetSubjectStatus(dnaId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectStatus", reflect.TypeOf((*MockIMutantRepository)(nil).GetSubjectStatus), dnaId)
}

// QueueDatabaseOperations mocks base method
func (m *MockIMutantRepository) QueueDatabaseOperations(subsChan <-chan *models.Subject) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "QueueDatabaseOperations", subsChan)
}

// QueueDatabaseOperations indicates an expected call of QueueDatabaseOperations
func (mr *MockIMutantRepositoryMockRecorder) QueueDatabaseOperations(subsChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueDatabaseOperations", reflect.TypeOf((*MockIMutantRepository)(nil).QueueDatabaseOperations), subsChan)
}

// GetSubjectsStats mocks base method
func (m *MockIMutantRepository) GetSubjectsStats() (models.MutantsPreStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectsStats")
	ret0, _ := ret[0].(models.MutantsPreStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectsStats indicates an expected call of GetSubjectsStats
func (mr *MockIMutantRepositoryMockRecorder) GetSubjectsStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectsStats", reflect.TypeOf((*MockIMutantRepository)(nil).GetSubjectsStats))
}

// GetStatsFromCache mocks base method
func (m *MockIMutantRepository) GetStatsFromCache() *models.MutantsStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsFromCache")
	ret0, _ := ret[0].(*models.MutantsStats)
	return ret0
}

// GetStatsFromCache indicates an expected call of GetStatsFromCache
func (mr *MockIMutantRepositoryMockRecorder) GetStatsFromCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsFromCache", reflect.TypeOf((*MockIMutantRepository)(nil).GetStatsFromCache))
}

// SaveStatsInCache mocks base method
func (m *MockIMutantRepository) SaveStatsInCache(stats *models.MutantsStats) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveStatsInCache", stats)
}

// SaveStatsInCache indicates an expected call of SaveStatsInCache
func (mr *MockIMutantRepositoryMockRecorder) SaveStatsInCache(stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStatsInCache", reflect.TypeOf((*MockIMutantRepository)(nil).SaveStatsInCache), stats)
}

// BuildRedisData mocks base method
func (m *MockIMutantRepository) BuildRedisData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildRedisData")
}

// BuildRedisData indicates an expected call of BuildRedisData
func (mr *MockIMutantRepositoryMockRecorder) BuildRedisData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildRedisData", reflect.TypeOf((*MockIMutantRepository)(nil).BuildRedisData))
}
